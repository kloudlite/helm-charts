# -- image pull policies for kloudlite pods, belonging to this chart
imagePullPolicy: Always

nodeSelector: &nodeSelector { }

# -- tolerations for pods belonging to this release
tolerations: &tolerations [ ]

# -- podlabels for pods belonging to this release
podLabels: &podLabels { }

# -- cookie domain dictates at what domain, the cookies should be set for auth or other purposes
cookieDomain: '.platform.kloudlite.io'

# -- base domain for all routers exposed through this cluster
baseDomain: 'platform.kloudlite.io'

# -- kloudlite account name, required only for labelling purposes, does not need to be a real kloudlite account name
accountName: 'kloudlite'

# -- kloudlite cluster name, required only for labelling purposes, does not need to be a real kloudlite cluster name
clusterName: 'platform'

# -- cluster internal DNS name
clusterInternalDNS: "cluster.local"

# @ignored
# -- account cookie name, that console-api should expect, while any client communicates through it's graphql interface
accountCookieName: "kloudlite-account"

# -- cluster cookie name, that console-api should expect, while any client communicates through it's graphql interface
# @ignored
clusterCookieName: "kloudlite-cluster"

# -- service account for privileged k8s operations, like creating namespaces, apps, routers etc.
clusterSvcAccount: kloudlite-cluster-svc-account

# -- service account for non k8s operations, just for specifying image pull secrets
normalSvcAccount: kloudlite-svc-account

# -- default project workspace name, the one that should be auto created, whenever you create a project
defaultProjectWorkspaceName: "default"

statefulPriorityClassName: "stateful"

kloudlite_release: v1.0.5-nightly

helmCharts:
  certManager:
    # -- whether to enable cert-manager
    enabled: true
    name: cert-manager

    configuration:
      nodeSelector: {}
      tolerations: []

  ingress-nginx:
    enabled: true
    name: ingress-nginx

    configuration:
      # -- can be DaemonSet or Deployment
      controllerKind: "Deployment"
      ingressClassName: "ingress-nginx"

      nodeSelector: 
        node-role.kubernetes.io/control-plane: "true"

      tolerations:
        - key: masters
          value: "true"
          effect: NoExecute
  
  descheduler:
    enabled: true
    name: descheduler

  loki-stack:
    enabled: true
    name: loki-stack
    configuration:
      s3credentials:
        awsAccessKeyId: <loki-s3-aws-access-key-id>
        awsSecretAccessKey: <loki-s3-aws-secret-access-key>
        region: <loki-s3-bucket-region>
        bucketName: <loki-s3-bucket-name>

  vector:
    enabled: true
    name: vector

  vector-agent:
    enabled: true
    name: vector-agent
    description: "vector agent for shipping logs to centralized vector aggregator"

  grafana:
    enabled: true
    name: grafana

    configuration:
      volumeSize: 2Gi

  kube-prometheus:
    enabled: true
    name: prometheus
    configuration:
      prometheus:
        volumeSize: 2Gi
      alertmanager:
        volumeSize: 2Gi


  container-registry:
    enabled: true
    name: container-registry

persistence:
  storageClasses:
    # -- ext4 storage class name
    ext4: sc-ext4
    # -- xfs storage class name
    xfs: sc-xfs

# @ignored
secretNames:
  # -- secret where all oauth credentials should be
  oAuthSecret: oauth-secrets
  # -- secret where all the webhook related should be
  webhookAuthzSecret: webhook-authz


clusterIssuer:
  # -- whether to install cluster issuer
  create: true

  # -- name of cluster issuer, to be used for issuing wildcard cert
  name: "cluster-issuer"
  # -- email that should be used for communicating with lets-encrypt services
  acmeEmail: sample@example.com

cloudflareWildCardCert:
  create: true

  # -- name for wildcard cert
  name: kl-cert-wildcard

  # -- k8s secret where wildcard cert should be stored
  secretName: kl-cert-wildcard-tls

  # -- cloudflare authz credentials
  cloudflareCreds:
    # -- cloudflare authorized email
    email: <cloudflare-email>
    # -- cloudflare authorized secret token
    secretToken: <cloudflare-secret-token>

  # -- list of all SANs (Subject Alternative Names) for which wildcard certs should be created
  domains:
    - '*.platform.kloudlite.io'

#routers:
#  authWeb:
#    # @ignored
#    # -- router name for auth web router
#    name: auth
#
#  accountsWeb:
#    # @ignored
#    # -- router name for accounts web router
#    name: accounts
#
#  consoleWeb:
#    # @ignored
#    # -- router name for console web router
#    name: console
#
#  socketWeb:
#    # @ignored
#    # -- router name for socket web router
#    name: socket
#
#  webhooksApi:
#    enabled: true
#    # @ignored
#    # -- router name for gateway api router
#    name: webhooks
#
#  gatewayApi:
#    # @ignored
#    # -- router name for gateway api router
#    name: gateway
#
#  dnsApi:
#    # @ignored
#    # -- router name for dns api router
#    name: dns-api
#
#  messageOfficeApi:
#    # @ignored
#    # -- router name for message office api router
#    name: message-office-api
#
#  observabilityApi:
#    # @ignored
#    # -- router name for logs and metrics api
#    name: observability

apps:
  authApi:
    # @ignored
    # -- workload name for auth api
#    name: auth-api
    # -- image (with tag) for auth api
    image: ghcr.io/kloudlite/platform/apis/auth:v1.0.5-nightly

    configuration:
      grpcPort: 3001
      oAuth2:
        # -- whether to enable oAuth2
        enabled: false
        github:
          # -- whether to enable GitHub oAuth2
          enabled: false
          # -- GitHub oAuth2 callback url
          callbackUrl: https://auth.platform.kloudlite.io/oauth2/callback/github
          # -- GitHub oAuth2 Client ID
          clientId: <github-client-id>
          # -- GitHub oAuth2 Client Secret
          clientSecret: <github-client-secret>
          
          # -- GitHub app id
          appId: <github-app-id>
          # -- GitHub app private key (base64 encoded)
          appPrivateKey: PGdpdGh1Yi1hcHAtcHJpdmF0ZS1rZXk+
          # -- GitHub app name, that we want to install on user's GitHub account
          githubAppName: kloudlite-dev

        gitlab:
          # -- whether to enable gitlab oAuth2
          enabled: false
          # -- gitlab oAuth2 callback url
          callbackUrl: https://auth.platform.kloudlite.io/oauth2/callback/gitlab
          # -- gitlab oAuth2 Client ID
          clientId: <gitlab-client-id>
          # -- gitlab oAuth2 Client Secret
          clientSecret: <gitlab-client-secret>

          

        google:
          # -- whether to enable google oAuth2
          enabled: false
          # -- google oAuth2 callback url
          callbackUrl: https://auth.platform.kloudlite.io/oauth2/callback/google
          # -- google oAuth2 Client ID
          clientId: <google-client-id>
          # -- google oAuth2 Client Secret
          clientSecret: <google-client-secret>


  commsApi:
    # -- whether to enable communications api
    enabled: true

    # @ignored
    # -- workload name for comms api
#    name: comms-api

    # -- image (with tag) for comms api
    image: ghcr.io/kloudlite/platform/apis/comms:v1.0.5-nightly

    # -- configurations for comms api
    configuration:
      # -- sendgrid api key for email communications, if (sendgrid.enabled)
      sendgridApiKey: 

      # -- email through which we should be sending emails to target users, if (sendgrid.enabled)
      supportEmail: 

      # @ignored
      grpcPort: 3001

      # -- account web invite url
      accountsWebInviteUrl: https://auth.platform.kloudlite.io/invite

      # -- project web invite url
      projectsWebInviteUrl: https://auth.platform.kloudlite.io/invite

      # -- console web invite url
      kloudliteConsoleWebUrl: https://console.platform.kloudlite.io

      # -- reset password web url
      resetPasswordWebUrl: https://auth.platform.kloudlite.io/reset-password

      # -- verify email web url
      verifyEmailWebUrl: https://auth.platform.kloudlite.io/verify-email

  consoleApi:
    # @ignored
    # -- workload name for console api
#    name: console-api

    # -- image (with tag) for console api
    image: ghcr.io/kloudlite/platform/apis/console:v1.0.5-nightly

    configuration:
      # @ignored
      httpPort: 3000
      # @ignored
      grpcPort: 3001
      # @ignored
      logsAndMetricsHttpPort: 9100

      vpnDevicesMaxOffset: 255
      vpnDevicesOffsetStart: 5

  accountsApi:
    # @ignored
    # -- workload name for accounts api
#    name: accounts-api

    # -- image (with tag) for accounts api
    image: ghcr.io/kloudlite/platform/apis/accounts:v1.0.5-nightly

    configuration:
      # @ignored
      httpPort: 3000

      # @ignored
      grpcPort: 3001

  iamApi:
    # @ignored
    # -- workload name for iam api
#    name: iam-api

    # -- image (with tag) for iam api
    image: ghcr.io/kloudlite/platform/apis/iam:v1.0.5-nightly

    configuration:
      # @ignored
      grpcPort: 3001

  infraApi:
    # @ignored
    # -- workload name for infra api
#    name: infra-api

    # -- image (with tag) for infra api
    image: ghcr.io/kloudlite/platform/apis/infra:v1.0.5-nightly

    configuration:
      # @ignored
      httpPort: 80
      # @ignored
      grpcPort: 3001

      aws:
        accessKey: ""
        secretKey: ""

        tenantRoleFormatString: "arn:aws:iam::%s:role/kloudlite-access-role"
        cloudformation:
          stackNamePrefix: "kloudlite-tenant-stack"
          roleNamePrefix: "kloudlite-tenant-role"
          instanceProfileNamePrefix: "kloudlite-instance-profile"
          stackS3URL: ""
          params:
            trustedARN: ""

  gatewayApi:
    # @ignored
    # -- workload name for gateway api
#    name: gateway-api
    # -- image (with tag) for container registry api
    image: ghcr.io/kloudlite/platform/apis/gateway:v1.0.5-nightly

  containerRegistryApi:
    enabled: true

    # @ignored
    # -- workload name for container registry api
#    name: container-registry-api

    # -- image (with tag) for container registry api
    image: ghcr.io/kloudlite/platform/apis/container-registry:v1.0.5-nightly

    configuration:
      # @ignored
      # -- (number) port on which container registry api should listen
      httpPort: 3000

      # -- (number) port on which container registry event listener should listen
      eventListenerPort: 4001

      # -- (number) port on which container registry grpc api should listen
      # @ignored
      grpcPort: 3001

      registryHost: ""
      registrySecret: ""

      buildClusterName: ""
      buildClusterAccountName: ""

      # -- namespace, in which build runs should be created
      jobBuildNamespace: {.Release.Namespace}

      authorizerPort: 4000

      # -- harbor configuration, required only if .apps.containerRegistryApi.enabled
      harbor: &harborConfiguration
        # -- harbor api version
        apiVersion: v2.0
        # -- harbor api admin username
        adminUsername: <harbor-admin-username>
        # -- harbor api admin password
        adminPassword: <harbor-admin-password>
        # -- harbor image registry host
        imageRegistryHost: <harbor-registry-host>

        # -- harbor webhook endpoint, (for receiving webhooks for every images pushed)
        webhookEndpoint: https://webhooks.platform.kloudlite.io/harbor
        # -- harbor webhook name
        webhookName: kloudlite-dev-webhook
        # -- harbor webhook authz secret
        webhookAuthz: <harbor-webhook-authz>

  consoleWeb:
    # @ignored
    # -- workload name for console web
#    name: console-web
    # -- image (with tag) for console web
    image: ghcr.io/kloudlite/platform/web/console-web:v1.0.5-nightly

  authWeb:
    # @ignored
    # -- workload name for auth web
#    name: auth-web
    # -- image (with tag) for auth web
    image: ghcr.io/kloudlite/platform/web/accounts-web:v1.0.5-nightly

  accountsWeb:
    # @ignored
    # -- workload name for accounts web
#    name: accounts-web
    # -- image (with tag) for accounts web
    image: ghcr.io/kloudlite/platform/web/accounts-web:v1.0.5-nightly

  auditLoggingWorker:
    # @ignored
    # -- workload name for audit logging worker
#    name: audit-logging-worker
    # -- image (with tag) for audit logging worker
    image: ghcr.io/kloudlite/platform/apis/audit-logging-worker:v1.0.5-nightly


  webhooksApi:
    enabled: true
    # @ignored
    # -- workload name for webhooks api
    name: webhooks-api
    # -- image (with tag) for webhooks api
    image: ghcr.io/kloudlite/platform/apis/webhooks:v1.0.5-nightly

    configuration:
      webhookAuthz:
        # -- webhook authz secret for gitlab webhooks
        gitlabSecret: <webhook-authz-gitlab-secret>
        # -- webhook authz secret for GitHub webhooks
        githubSecret: <webhook-authz-github-secret>
        # -- webhook authz secret for harbor webhooks
        harborSecret: <harbor-webhook-authz>
        # -- webhook authz secret for kloudlite internal calls
        kloudliteSecret: <webhook-authz-kloudlite-secret>

  messageOfficeApi:
    # @ignored
    # -- workload name for message office api
    name: message-office-api
    # -- image (with tag) for message office api
    image: ghcr.io/kloudlite/platform/apis/message-office:v1.0.5-nightly

    configuration:
      # @ignored
      externalGrpcPort: 3001

      # @ignored
      internalGrpcPort: 3002

      # @ignored
      httpPort: 3000

      # -- token hashing secret, that is used to hash access tokens for kloudlite agents
      # -- consider using 128 characters random string, you can use `python -c "import secrets; print(secrets.token_urlsafe(128))"`
      tokenHashingSecret: <token-hashing-secret>

      platformAccessToken: "sample"

preferOperatorsOnMasterNodes: true

operators:
  # -- kloudlite platform operator
  platformOperator:
    # -- whether to enable platform operator
    enabled: true
    # @ignored
    # -- workload name for platform operator
    name: kl-platform-operator
    # -- image (with tag) for platform operator
    image: ghcr.io/kloudlite/operators/platform-operator:v1.0.5-nightly

    configuration:
      resource_watcher:
        platformAccessToken: <platform-access-token>
      nodepool:
        cloudProviderName: "aws"
        cloudProviderRegion: "ap-south"

        k3sJoinToken: "asdasdkjnads"
        k3sServerPublicHost: "asd32ewqdsa"

      cluster:
        jobImage:
          # -- required
          name: ghcr.io/kloudlite/infrastructure-as-code
          # -- optional
          tag: ""

        IACStateStore:
          # -- s3 bucket name, to store kloudlite's infrastructure-as-code remote state
          s3BucketName: "sample"
          # -- s3 bucket region, to store kloudlite's infrastructure-as-code remote state
          s3BucketRegion: "ap-south-1"
          s3BucketDir: "iac-state"

          accessKey: "asdasdasd"
          secretKey: "32kejwqdasn"

        cloudflare:
          # -- cloudflare api token, required to authenticate with cloudflare api
          apiToken: ""
          # -- cloudflare zone id, to manage CNAMEs and A records for managed clusters
          zoneId: ""
          # -- cloudflare base domain, on top of which CNAMES and wildcard names will be created
          baseDomain: ""

      routers:
        acmeEmail: ""

  wgOperator:
    # -- whether to enable wg operator
    enabled: true
    # -- wg operator workload name
    # @ignored
    name: kl-wg-operator
    # -- wg operator image and tag
    image:
      repository: ghcr.io/kloudlite/operators/wireguard
      tag: v1.0.5-nightly
      pullPolicy: ""

    # -- wireguard configuration options
    configuration:
      # -- cluster pods CIDR range
      podCIDR: 10.42.0.0/16
      # -- cluster services CIDR range
      svcCIDR: 10.43.0.0/16
      # -- dns hosted zone, i.e., dns pointing to this cluster
      dnsHostedZone: <dns-hosted-zone>

      enableExamples: false
